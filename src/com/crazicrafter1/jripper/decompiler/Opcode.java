package com.crazicrafter1.jripper.decompiler;

import java.util.ArrayList;

public enum Opcode {

    NOP(0, 0),
    ACONST_NULL(1, 0),
    ICONST_M1(2, 0),
    ICONST_0(3, 0),
    ICONST_1(4, 0),
    ICONST_2(5, 0),
    ICONST_3(6, 0),
    ICONST_4(7, 0),
    ICONST_5(8, 0),
    LCONST_0(9, 0),
    LCONST_1(10, 0),
    FCONST_0(11, 0),
    FCONST_1(12, 0),
    FCONST_2(13, 0),
    DCONST_0(14, 0),
    DCONST_1(15, 0),
    BIPUSH(16, 1),
    SIPUSH(17, 2),
    LDC(18, 1),
    LDC_W(19, 2),
    LDC2_W(20, 2),
    ILOAD(21, 1),
    LLOAD(22, 1),
    FLOAD(23, 1),
    DLOAD(24, 1),
    ALOAD(25, 1),
    ILOAD_0(26, 0),
    ILOAD_1(27, 0),
    ILOAD_2(28, 0),
    ILOAD_3(29, 0),
    LLOAD_0(30, 0),
    LLOAD_1(31, 0),
    LLOAD_2(32, 0),
    LLOAD_3(33, 0),
    FLOAD_0(34, 0),
    FLOAD_1(35, 0),
    FLOAD_2(36, 0),
    FLOAD_3(37, 0),
    DLOAD_0(38, 0),
    DLOAD_1(39, 0),
    DLOAD_2(40, 0),
    DLOAD_3(41, 0),
    ALOAD_0(42, 0),
    ALOAD_1(43, 0),
    ALOAD_2(44, 0),
    ALOAD_3(45, 0),
    IALOAD(46, 0),
    LALOAD(47, 0),
    FALOAD(48, 0),
    DALOAD(49, 0),
    AALOAD(50, 0),
    BALOAD(51, 0),
    CALOAD(52, 0),
    SALOAD(53, 0),
    ISTORE(54, 1),
    LSTORE(55, 1),
    FSTORE(56, 1),
    DSTORE(57, 1),
    ASTORE(58, 1),
    ISTORE_0(59, 0),
    ISTORE_1(60, 0),
    ISTORE_2(61, 0),
    ISTORE_3(62, 0),
    LSTORE_0(63, 0),
    LSTORE_1(64, 0),
    LSTORE_2(65, 0),
    LSTORE_3(66, 0),
    FSTORE_0(67, 0),
    FSTORE_1(68, 0),
    FSTORE_2(69, 0),
    FSTORE_3(70, 0),
    DSTORE_0(71, 0),
    DSTORE_1(72, 0),
    DSTORE_2(73, 0),
    DSTORE_3(74, 0),
    ASTORE_0(75, 0),
    ASTORE_1(76, 0),
    ASTORE_2(77, 0),
    ASTORE_3(78, 0),
    IASTORE(79, 0),
    LASTORE(80, 0),
    FASTORE(81, 0),
    DASTORE(82, 0),
    AASTORE(83, 0),
    BASTORE(84, 0),
    CASTORE(85, 0),
    SASTORE(86, 0),
    POP(87, 0),
    POP2(88, 0),
    DUP(89, 0),
    DUP_X1(90, 0),
    DUP_X2(91, 0),
    DUP2(92, 0),
    DUP2_X1(93, 0),
    DUP2_X2(94, 0),
    SWAP(95, 0),
    IADD(96, 0),
    LADD(97, 0),
    FADD(98, 0),
    DADD(99, 0),
    ISUB(100, 0),
    LSUB(101, 0),
    FSUB(102, 0),
    DSUB(103, 0),
    IMUL(104, 0),
    LMUL(105, 0),
    FMUL(106, 0),
    DMUL(107, 0),
    IDIV(108, 0),
    LDIV(109, 0),
    FDIV(110, 0),
    DDIV(111, 0),
    IREM(112, 0),
    LREM(113, 0),
    FREM(114, 0),
    DREM(115, 0),
    INEG(116, 0),
    LNEG(117, 0),
    FNEG(118, 0),
    DNEG(119, 0),
    ISHL(120, 0),
    LSHL(121, 0),
    ISHR(122, 0),
    LSHR(123, 0),
    IUSHR(124, 0),
    LUSHR(125, 0),
    IAND(126, 0),
    LAND(127, 0),
    IOR(128, 0),
    LOR(129, 0),
    IXOR(130, 0),
    LXOR(131, 0),
    IINC(132, 2),
    I2L(133, 0),
    I2F(134, 0),
    I2D(135, 0),
    L2I(136, 0),
    L2F(137, 0),
    L2D(138, 0),
    F2I(139, 0),
    F2L(140, 0),
    F2D(141, 0),
    D2I(142, 0),
    D2L(143, 0),
    D2F(144, 0),
    I2B(145, 0),
    I2C(146, 0),
    I2S(147, 0),
    LCMP(148, 0),
    FCMPL(149, 0),
    FCMPG(150, 0),
    DCMPL(151, 0),
    DCMPG(152, 0),
    IFEQ(153, 2),
    IFNE(154, 2),
    IFLT(155, 2),
    IFGE(156, 2),
    IFGT(157, 2),
    IFLE(158, 2),
    IF_ICMPEQ(159, 2),
    IF_ICMPNE(160, 2),
    IF_ICMPLT(161, 2),
    IF_ICMPGE(162, 2),
    IF_ICMPGT(163, 2),
    IF_ICMPLE(164, 2),
    IF_ACMPEQ(165, 2),
    IF_ACMPNE(166, 2),
    GOTO(167, 2),
    JSR(168, 2),
    RET(169, 1),
    TABLESWITCH(170, -1),
    LOOKUPSWITCH(171, -1),
    IRETURN(172, 0),
    LRETURN(173, 0),
    FRETURN(174, 0),
    DRETURN(175, 0),
    ARETURN(176, 0),
    RETURN(177, 0),
    GETSTATIC(178, 2),
    PUTSTATIC(179, 2),
    GETFIELD(180, 2),
    PUTFIELD(181, 2),
    INVOKEVIRTUAL(182, 2),
    INVOKESPECIAL(183, 2),
    INVOKESTATIC(184, 2),
    INVOKEINTERFACE(185, 4),
    INVOKEDYNAMIC(186, 4),
    NEW(187, 2),
    NEWARRAY(188, 1),
    ANEWARRAY(189, 2),
    ARRAYLENGTH(190, 0),
    ATHROW(191, 0),
    CHECKCAST(192, 2),
    INSTANCEOF(193, 2),
    MONITORENTER(194, 0),
    MONITOREXIT(195, 0),
    WIDE(196, -1),
    MULTIANEWARRAY(197, 3),
    IFNULL(198, 2),
    IFNONNULL(199, 2),
    GOTO_W(200, 4),
    JSR_W(201, 4),
    ;

    /*
    private static final Opcode[] OPCODES = {
            Opcode.NOP,
            Opcode.ACONST_NULL,
            Opcode.ICONST_M1,
            Opcode.ICONST_0,
            Opcode.ICONST_1,
            Opcode.ICONST_2,
            Opcode.ICONST_3,
            Opcode.ICONST_4,
            Opcode.ICONST_5,
            Opcode.LCONST_0,
            Opcode.LCONST_1,
            Opcode.FCONST_0,
            Opcode.FCONST_1,
            Opcode.FCONST_2,
            Opcode.DCONST_0,
            Opcode.DCONST_1,
            Opcode.BIPUSH,
            Opcode.SIPUSH,
            Opcode.LDC,
            Opcode.LDC_W,
            Opcode.LDC2_W,
            Opcode.ILOAD,
            Opcode.LLOAD,
            Opcode.FLOAD,
            Opcode.DLOAD,
            Opcode.ALOAD,
            Opcode.ILOAD_0,
            Opcode.ILOAD_1,
            Opcode.ILOAD_2,
            Opcode.ILOAD_3,
            Opcode.LLOAD_0,
            Opcode.LLOAD_1,
            Opcode.LLOAD_2,
            Opcode.LLOAD_3,
            Opcode.FLOAD_0,
            Opcode.FLOAD_1,
            Opcode.FLOAD_2,
            Opcode.FLOAD_3,
            Opcode.DLOAD_0,
            Opcode.DLOAD_1,
            Opcode.DLOAD_2,
            Opcode.DLOAD_3,
            Opcode.ALOAD_0,
            Opcode.ALOAD_1,
            Opcode.ALOAD_2,
            Opcode.ALOAD_3,
            Opcode.IALOAD,
            Opcode.LALOAD,
            Opcode.FALOAD,
            Opcode.DALOAD,
            Opcode.AALOAD,
            Opcode.BALOAD,
            Opcode.CALOAD,
            Opcode.SALOAD,
            Opcode.ISTORE,
            Opcode.LSTORE,
            Opcode.FSTORE,
            Opcode.DSTORE,
            Opcode.ASTORE,
            Opcode.ISTORE_0,
            Opcode.ISTORE_1,
            Opcode.ISTORE_2,
            Opcode.ISTORE_3,
            Opcode.LSTORE_0,
            Opcode.LSTORE_1,
            Opcode.LSTORE_2,
            Opcode.LSTORE_3,
            Opcode.FSTORE_0,
            Opcode.FSTORE_1,
            Opcode.FSTORE_2,
            Opcode.FSTORE_3,
            Opcode.DSTORE_0,
            Opcode.DSTORE_1,
            Opcode.DSTORE_2,
            Opcode.DSTORE_3,
            Opcode.ASTORE_0,
            Opcode.ASTORE_1,
            Opcode.ASTORE_2,
            Opcode.ASTORE_3,
            Opcode.IASTORE,
            Opcode.LASTORE,
            Opcode.FASTORE,
            Opcode.DASTORE,
            Opcode.AASTORE,
            Opcode.BASTORE,
            Opcode.CASTORE,
            Opcode.SASTORE,
            Opcode.POP,
            Opcode.POP2,
            Opcode.DUP,
            Opcode.DUP_X1,
            Opcode.DUP_X2,
            Opcode.DUP2,
            Opcode.DUP2_X1,
            Opcode.DUP2_X2,
            Opcode.SWAP,
            Opcode.IADD,
            Opcode.LADD,
            Opcode.FADD,
            Opcode.DADD,
            Opcode.ISUB,
            Opcode.LSUB,
            Opcode.FSUB,
            Opcode.DSUB,
            Opcode.IMUL,
            Opcode.LMUL,
            Opcode.FMUL,
            Opcode.DMUL,
            Opcode.IDIV,
            Opcode.LDIV,
            Opcode.FDIV,
            Opcode.DDIV,
            Opcode.IREM,
            Opcode.LREM,
            Opcode.FREM,
            Opcode.DREM,
            Opcode.INEG,
            Opcode.LNEG,
            Opcode.FNEG,
            Opcode.DNEG,
            Opcode.ISHL,
            Opcode.LSHL,
            Opcode.ISHR,
            Opcode.LSHR,
            Opcode.IUSHR,
            Opcode.LUSHR,
            Opcode.IAND,
            Opcode.LAND,
            Opcode.IOR,
            Opcode.LOR,
            Opcode.IXOR,
            Opcode.LXOR,
            Opcode.IINC,
            Opcode.I2L,
            Opcode.I2F,
            Opcode.I2D,
            Opcode.L2I,
            Opcode.L2F,
            Opcode.L2D,
            Opcode.F2I,
            Opcode.F2L,
            Opcode.F2D,
            Opcode.D2I,
            Opcode.D2L,
            Opcode.D2F,
            Opcode.I2B,
            Opcode.I2C,
            Opcode.I2S,
            Opcode.LCMP,
            Opcode.FCMPL,
            Opcode.FCMPG,
            Opcode.DCMPL,
            Opcode.DCMPG,
            Opcode.IFEQ,
            Opcode.IFNE,
            Opcode.IFLT,
            Opcode.IFGE,
            Opcode.IFGT,
            Opcode.IFLE,
            Opcode.IF_ICMPEQ,
            Opcode.IF_ICMPNE,
            Opcode.IF_ICMPLT,
            Opcode.IF_ICMPGE,
            Opcode.IF_ICMPGT,
            Opcode.IF_ICMPLE,
            Opcode.IF_ACMPEQ,
            Opcode.IF_ACMPNE,
            Opcode.GOTO,
            Opcode.JSR,
            Opcode.RET,
            Opcode.TABLESWITCH,
            Opcode.LOOKUPSWITCH,
            Opcode.IRETURN,
            Opcode.LRETURN,
            Opcode.FRETURN,
            Opcode.DRETURN,
            Opcode.ARETURN,
            Opcode.RETURN,
            Opcode.GETSTATIC,
            Opcode.PUTSTATIC,
            Opcode.GETFIELD,
            Opcode.PUTFIELD,
            Opcode.INVOKEVIRTUAL,
            Opcode.INVOKESPECIAL,
            Opcode.INVOKESTATIC,
            Opcode.INVOKEINTERFACE,
            Opcode.INVOKEDYNAMIC,
            Opcode.NEW,
            Opcode.NEWARRAY,
            Opcode.ANEWARRAY,
            Opcode.ARRAYLENGTH,
            Opcode.ATHROW,
            Opcode.CHECKCAST,
            Opcode.INSTANCEOF,
            Opcode.MONITORENTER,
            Opcode.MONITOREXIT,
            Opcode.WIDE,
            Opcode.MULTIANEWARRAY,
            Opcode.IFNULL,
            Opcode.IFNONNULL,
            Opcode.GOTO_W,
            Opcode.JSR_W
    };
    */

    private static final Opcode[] VALUES = Opcode.values();

    private final int code;     // numeric id
    private final int varargs;  // variable arguments for opcode

    Opcode(int code, int varargs) {
        this.code = code;
        this.varargs = varargs;
    }

    public static int getArgCount(ArrayList<Integer> code, int index) {
        Opcode c = VALUES[code.get(index)];
        if (c.varargs != -1 ) {
            return c.varargs;
        }

        if (c == WIDE) {
            if (VALUES[code.get(index)+1].code == IINC.code)
                return 5;
            return 3;
        }

        throw new RuntimeException("Opcode " + c.name() + " is not implemented");
        //return -1;
    }

    public static Opcode getOpcode(int i) {
        return VALUES[i];
    }
}
